{"version":3,"sources":["utils/AppContext.js","components/Nav.js","components/BookSearch.js","components/BookTable.js","components/Home.js","components/Saved.js","App.js","registerServiceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","props","useState","books","setBooks","fetching","setFetching","searching","setSearching","Provider","value","bookData","fetchData","search","children","Nav","className","to","BookSearch","useContext","API","fetch","method","body","JSON","stringify","headers","res","json","Fragment","type","placeholder","onChange","e","target","onClick","BookTable","id","items","map","book","key","volumeInfo","title","authors","author","toString","preventDefault","window","open","infoLink","console","log","imageLinks","src","thumbnail","alt","width","description","Home","Saved","App","path","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.cf0c6318.chunk.js","sourcesContent":["import React, {useState, createContext} from 'react';\r\n\r\nexport const AppContext = createContext();\r\n\r\nexport const AppProvider = props => {\r\n\r\n//Initially data called from API\r\nconst [books, setBooks] = useState({}); \r\n//State check to see if it's done being called\r\nconst [fetching, setFetching] = useState(false); \r\n// Set search data\r\nconst [searching, setSearching] = useState(\"\"); \r\n\r\n\r\n  return(\r\n    <AppContext.Provider value={{ \r\n      bookData: [books, setBooks], \r\n      fetchData: [fetching, setFetching], \r\n      search: [searching, setSearching], \r\n      }}>\r\n      {props.children}\r\n    </AppContext.Provider>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Nav = () => {\r\n  return (\r\n    <nav>\r\n      <h3>Google Books</h3>\r\n      <ul className=\"nav-links\">\r\n        <Link to='/'>\r\n        <li>Home</li>\r\n        </Link>\r\n        <Link to='/saved'>\r\n        <li>Saved</li>\r\n        </Link>\r\n      </ul>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Nav","import React,{useContext} from 'react';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst BookSearch = () => {\r\n\r\n  const {search, bookData, fetchData} = useContext(AppContext);\r\n  // eslint-disable-next-line\r\n  let [books, setBooks] =  bookData;\r\n  let [fetching, setFetching] =  fetchData;\r\n  let [searching, setSearching] =  search;\r\n\r\n  const handleChange = e => {\r\n    setSearching( searching = e.target.value);\r\n  };\r\n\r\n  const API = {\r\n\r\n    async booksCall() {\r\n      if( searching === ''){\r\n\r\n      }else{\r\n        const res = await fetch(\"/api/books\", {\r\n        method: \"POST\",\r\n        body: JSON.stringify({searching}),\r\n        headers: { \"Content-Type\": \"application/json\" }\r\n        });\r\n    \r\n       const json = await res.json();\r\n          setBooks(books = json);\r\n          if (fetching === false){\r\n            setFetching(fetching = true)\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n  return(\r\n    <React.Fragment>\r\n      <header>\r\n        <h1>Google books search</h1>\r\n      </header>\r\n\r\n      <section className=\"filterBar\">\r\n        <input \r\n          type=\"text\" \r\n          placeholder=\"Filter by book name...\"\r\n          value={searching}\r\n          onChange={handleChange}\r\n        />\r\n        <button onClick={() => API.booksCall() }>Search</button>\r\n      </section>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default BookSearch","import React,{useContext} from 'react';\r\nimport { AppContext } from '../utils/AppContext';\r\n\r\nconst BookTable = () => {\r\n\r\n  // Grab Search data to filter against\r\n  const {bookData, fetchData} = useContext(AppContext);\r\n  let [fetching/*, setFetching*/] =  fetchData;\r\n\r\n  return(\r\n    <section id=\"searchedBooks\">\r\n      {fetching === false ?  \r\n       ''\r\n        : (\r\n          <React.Fragment>\r\n          {bookData[0].items.map((book) => (\r\n            <div className=\"book\" key={book.id}>\r\n              <h3>{book.volumeInfo.title}</h3>\r\n              <h4>Written By: {\r\n                (book.volumeInfo.authors ) ? \r\n                book.volumeInfo.authors.map((author) => ` ${author}`).toString() :\r\n                  \" Not Provided\"\r\n              }</h4>\r\n              <div className=\"book-info\">\r\n                <div className=\"book-buttons\">\r\n                  <button onClick={(e) => {\r\n                    e.preventDefault();\r\n                    window.open(book.volumeInfo.infoLink);\r\n                    }}>View\r\n                  </button>\r\n                  <button onClick={() => console.log(\"saved\")}>Save</button>\r\n                </div>\r\n                <div>{ (book.volumeInfo.imageLinks ? \r\n                <img src={book.volumeInfo.imageLinks.thumbnail} alt=\"book.volumeInfo.title\"/>\r\n                : <img src=\"./content/img/not-found.jpg\" alt=\"Not Found\" width=\"150\"/> )}</div>\r\n                <div>{ (book.volumeInfo.description ? <p>{book.volumeInfo.description}</p>: <p>No description has been provided for this book.</p> )}</div>\r\n                \r\n                </div>\r\n              </div>  \r\n          ))}\r\n        </React.Fragment>\r\n      )}\r\n    </section>\r\n    )\r\n  }; \r\n  \r\n  export default BookTable","import React from 'react';\r\nimport BookSearch from './BookSearch';\r\nimport BookTable from './BookTable';\r\n\r\nfunction Home() {\r\n  return (\r\n    <React.Fragment>\r\n      <BookSearch />\r\n      <BookTable />\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Home;","import React/*,  {useState, useEffect}*/ from 'react';\r\n\r\nfunction Saved() {\r\n\r\n  return (\r\n    <React.Fragment>\r\n\r\n    </React.Fragment>\r\n  )\r\n}\r\n\r\nexport default Saved;","import React from 'react';\r\nimport \"./scss/App.scss\";\r\nimport {AppProvider} from './utils/AppContext';\r\nimport Nav from './components/Nav';\r\nimport Home from './components/Home';\r\nimport Saved from './components/Saved';\r\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\r\n\r\nfunction App() {\r\n  return (\r\n    <AppProvider> \r\n      <Router>\r\n      <div className=\"App\">\r\n        <Nav />\r\n        <section id=\"wrapper\"> \r\n        <Switch>\r\n          <Route path=\"/\" exact component={Home}></Route>\r\n          <Route path=\"/saved\" component={Saved}></Route>\r\n        </Switch>\r\n        </section>\r\n      </div>\r\n      </Router>\r\n    </AppProvider> \r\n  );\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport default function register() {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (!isLocalhost) {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl);\r\n      } else {\r\n        // This is running on localhost. Lets check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log(\"New content is available; please refresh.\");\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport registerServiceWorker from \"./registerServiceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\nregisterServiceWorker();\r\n"],"sourceRoot":""}