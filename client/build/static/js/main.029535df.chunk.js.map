{"version":3,"sources":["utils/AppContext.js","components/Nav.js","components/BookSearch.js","components/BookTable.js","components/Home.js","components/Saved.js","App.js","registerServiceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","props","useState","books","setBooks","fetching","setFetching","searching","setSearching","Provider","value","bookData","fetchData","search","children","Nav","className","to","BookSearch","useContext","API","fetch","method","body","JSON","stringify","headers","res","json","Fragment","type","placeholder","onChange","e","target","onClick","BookTable","id","items","map","book","key","volumeInfo","title","authors","author","toString","preventDefault","window","open","infoLink","console","log","imageLinks","src","thumbnail","alt","width","description","Home","Saved","App","path","exact","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","status","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.029535df.chunk.js","sourcesContent":["import React, {useState, createContext} from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = props => {\n\n//Initially data called from API\nconst [books, setBooks] = useState({}); \n//State check to see if it's done being called\nconst [fetching, setFetching] = useState(false); \n// Set search data\nconst [searching, setSearching] = useState(\"\"); \n\n\n  return(\n    <AppContext.Provider value={{ \n      bookData: [books, setBooks], \n      fetchData: [fetching, setFetching], \n      search: [searching, setSearching], \n      }}>\n      {props.children}\n    </AppContext.Provider>\n  );\n}\n","import React from 'react';\nimport { Link } from \"react-router-dom\";\n\nconst Nav = () => {\n  return (\n    <nav>\n      <h3>Google Books</h3>\n      <ul className=\"nav-links\">\n        <Link to='/'>\n        <li>Home</li>\n        </Link>\n        <Link to='/saved'>\n        <li>Saved</li>\n        </Link>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Nav","import React,{useContext} from 'react';\nimport { AppContext } from '../utils/AppContext';\n\nconst BookSearch = () => {\n\n  const {search, bookData, fetchData} = useContext(AppContext);\n  // eslint-disable-next-line\n  let [books, setBooks] =  bookData;\n  let [fetching, setFetching] =  fetchData;\n  let [searching, setSearching] =  search;\n\n  const handleChange = e => {\n    setSearching( searching = e.target.value);\n  };\n\n  const API = {\n\n    async booksCall() {\n      if( searching === ''){\n\n      }else{\n        const res = await fetch(\"/api/books\", {\n        method: \"POST\",\n        body: JSON.stringify({searching}),\n        headers: { \"Content-Type\": \"application/json\" }\n        });\n    \n       const json = await res.json();\n          setBooks(books = json);\n          if (fetching === false){\n            setFetching(fetching = true)\n          }\n        }\n      }\n    }\n\n  return(\n    <React.Fragment>\n      <header>\n        <h1>Google books search</h1>\n      </header>\n\n      <section className=\"filterBar\">\n        <input \n          type=\"text\" \n          placeholder=\"Filter by book name...\"\n          value={searching}\n          onChange={handleChange}\n        />\n        <button onClick={() => API.booksCall() }>Search</button>\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default BookSearch","import React,{useContext} from 'react';\nimport { AppContext } from '../utils/AppContext';\n\nconst BookTable = () => {\n\n  // Grab Search data to filter against\n  const {bookData, fetchData} = useContext(AppContext);\n  let [fetching/*, setFetching*/] =  fetchData;\n\n  return(\n    <section id=\"searchedBooks\">\n      {fetching === false ?  \n       ''\n        : (\n          <React.Fragment>\n          {bookData[0].items.map((book) => (\n            <div className=\"book\" key={book.id}>\n              <h3>{book.volumeInfo.title}</h3>\n              <h4>Written By: {\n                (book.volumeInfo.authors ) ? \n                book.volumeInfo.authors.map((author) => ` ${author}`).toString() :\n                  \" Not Provided\"\n              }</h4>\n              <div className=\"book-info\">\n                <div className=\"book-buttons\">\n                  <button onClick={(e) => {\n                    e.preventDefault();\n                    window.open(book.volumeInfo.infoLink);\n                    }}>View\n                  </button>\n                  <button onClick={() => console.log(\"saved\")}>Save</button>\n                </div>\n                <div>{ (book.volumeInfo.imageLinks ? \n                <img src={book.volumeInfo.imageLinks.thumbnail} alt=\"book.volumeInfo.title\"/>\n                : <img src=\"./content/img/not-found.jpg\" alt=\"Not Found\" width=\"150\"/> )}</div>\n                <div>{ (book.volumeInfo.description ? <p>{book.volumeInfo.description}</p>: <p>No description has been provided for this book.</p> )}</div>\n                \n                </div>\n              </div>  \n          ))}\n        </React.Fragment>\n      )}\n    </section>\n    )\n  }; \n  \n  export default BookTable","import React from 'react';\nimport BookSearch from './BookSearch';\nimport BookTable from './BookTable';\n\nfunction Home() {\n  return (\n    <React.Fragment>\n      <BookSearch />\n      <BookTable />\n    </React.Fragment>\n  )\n}\n\nexport default Home;","import React/*,  {useState, useEffect}*/ from 'react';\n\nfunction Saved() {\n\n  return (\n    <React.Fragment>\n\n    </React.Fragment>\n  )\n}\n\nexport default Saved;","import React from 'react';\nimport \"./scss/App.scss\";\nimport {AppProvider} from './utils/AppContext';\nimport Nav from './components/Nav';\nimport Home from './components/Home';\nimport Saved from './components/Saved';\nimport { BrowserRouter as Router, Switch, Route} from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <AppProvider> \n      <Router>\n      <div className=\"App\">\n        <Nav />\n        <section id=\"wrapper\"> \n        <Switch>\n          <Route path=\"/\" exact component={Home}></Route>\n          <Route path=\"/saved\" component={Saved}></Route>\n        </Switch>\n        </section>\n      </div>\n      </Router>\n    </AppProvider> \n  );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}