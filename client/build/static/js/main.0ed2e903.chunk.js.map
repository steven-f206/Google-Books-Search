{"version":3,"sources":["utils/AppContext.js","components/Nav.js","components/BookSearch.js","components/BookTable.js","components/Home.js","components/SavedBooks.js","components/MessageModal.js","components/Footer.js","App.js","registerServiceWorker.js","index.js"],"names":["AppContext","createContext","AppProvider","props","useState","books","setBooks","savedBooks","setSavedBooks","fetching","setFetching","searching","setSearching","modalState","setModalState","modalCopyState","setModalCopyState","Provider","value","bookData","savedBookData","fetchData","search","modal","modalCopy","children","Nav","className","to","exact","BookSearch","useContext","API","e","preventDefault","test","navigator","userAgent","target","querySelector","blur","fetch","method","body","JSON","stringify","headers","res","json","Fragment","onSubmit","type","placeholder","name","onChange","onKeyPress","key","handleKeyPress","BookTable","id","idInfo","items","filter","data","idInfopass","title","volumeInfo","description","authors","imgUrl","imageLinks","thumbnail","linkUrl","infoLink","status","setTimeout","map","book","author","toString","onClick","window","open","data-id","getAttribute","src","alt","width","Home","SavedBooks","jsonId","bookId","useEffect","MessageModal","Footer","year","Date","getFullYear","App","path","activeClassName","component","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","response","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.0ed2e903.chunk.js","sourcesContent":["import React, { useState, createContext } from 'react';\n\nexport const AppContext = createContext();\n\nexport const AppProvider = props => {\n\n  //Initially data called from API\n  const [books, setBooks] = useState({});\n  // Saved book data\n  const [savedBooks, setSavedBooks] = useState('');\n  //State check to see if it's done being called\n  const [fetching, setFetching] = useState(false);\n  // Set search data\n  const [searching, setSearching] = useState(\"\");\n  // Set Modal state and message\n  const [modalState, setModalState] = useState(\"hide\");\n  const [modalCopyState, setModalCopyState] = useState(\"\");\n\n  return (\n    <AppContext.Provider value={{\n      bookData: [books, setBooks],\n      savedBookData: [savedBooks, setSavedBooks],\n      fetchData: [fetching, setFetching],\n      search: [searching, setSearching],\n      modal: [modalState, setModalState],\n      modalCopy: [modalCopyState, setModalCopyState]\n    }}>\n      {props.children}\n    </AppContext.Provider>\n  );\n}\n","import React from 'react';\nimport { NavLink } from \"react-router-dom\";\n\nconst Nav = () => {\n  return (\n    <nav>\n      <p>Google Books</p>\n      <ul className=\"nav-links\">\n        <NavLink to='/' exact>\n          <li>Home</li>\n        </NavLink>\n        <NavLink to='/saved'>\n          <li>Saved</li>\n        </NavLink>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Nav","import React, { useContext } from 'react';\nimport { AppContext } from '../utils/AppContext';\n\nconst BookSearch = () => {\n\n  const { search, bookData, fetchData } = useContext(AppContext);\n  // eslint-disable-next-line\n  let [books, setBooks] = bookData;\n  let [fetching, setFetching] = fetchData;\n  let [searching, setSearching] = search;\n\n  const handleChange = e => {\n    setSearching(searching = e.target.value);\n  };\n\n  const API = {\n\n    async booksCall(e) {\n      e.preventDefault();\n\n      if (/Android|webOS|iPhone|iPad|iPod|BlackBerry|BB|PlayBook|IEMobile|Windows Phone|Kindle|Silk|Opera Mini/i.test(navigator.userAgent)) {\n        e.target.querySelector(\"input\").blur();\n      }\n\n      if (searching === '') {\n\n      } else {\n        const res = await fetch(\"/api/books\", {\n          method: \"POST\",\n          body: JSON.stringify({ searching }),\n          headers: { \"Content-Type\": \"application/json\" }\n        });\n\n        const json = await res.json();\n        setBooks(books = json);\n        if (fetching === false) {\n          setFetching(fetching = true)\n        }\n      }\n    }\n  }\n\n  let handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      API.booksCall();\n    }\n  }\n\n  return (\n    <React.Fragment>\n      <header>\n        <h1>Google Books Search</h1>\n      </header>\n\n      <section className=\"filterBar\">\n        <form onSubmit={(e) => API.booksCall(e)}>\n          <input\n            type=\"text\"\n            placeholder=\"Filter by book name...\"\n            value={searching}\n            name=\"book-search\"\n            onChange={handleChange}\n            onKeyPress={(e) => handleKeyPress(e)}\n          />\n          <button>Search</button>\n        </form>\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default BookSearch","import React, { useContext } from 'react';\nimport { AppContext } from '../utils/AppContext';\n\nconst BookTable = () => {\n\n  // Grab Search data to filter against\n  const { bookData, fetchData, modal, modalCopy } = useContext(AppContext);\n  let [fetching/*, setFetching*/] = fetchData;\n  // eslint-disable-next-line\n  let [modalState, setModalState] = modal;\n  // eslint-disable-next-line\n  let [modalCopyState, setModalCopyState] = modalCopy;\n\n  const API = {\n    async saveBooks(id) {\n\n      let idInfo = bookData[0].items.filter(data => data.id === id);\n\n      let idInfopass = {\n        id: idInfo[0].id,\n        title: idInfo[0].volumeInfo.title,\n        description: idInfo[0].volumeInfo.description,\n        authors: idInfo[0].volumeInfo.authors,\n        imgUrl: idInfo[0].volumeInfo.imageLinks.thumbnail,\n        linkUrl: idInfo[0].volumeInfo.infoLink,\n      }\n\n      //console.log(idInfopass);\n\n      const res = await fetch(\"/api/saveBooks\", {\n        method: \"POST\",\n        body: JSON.stringify(idInfopass),\n        headers: { \"Content-Type\": \"application/json\" }\n      });\n\n      // eslint-disable-next-line\n      const json = await res;\n\n      if (json.status === 200) {\n        setModalState(modalState = \"\");\n        setModalCopyState(modalCopyState = \"Book added to saved books.\");\n        setTimeout(() => { setModalState(modalState = \"set\") }, 500);\n        setTimeout(() => { setModalState(modalState = \"\") }, 3000);\n        setTimeout(() => { setModalState(modalState = \"hide\") }, 3500);\n      } else if (json.status === 304) {\n        setModalState(modalState = \"\");\n        setModalCopyState(modalCopyState = \"Book already in saved books.\");\n        setTimeout(() => { setModalState(modalState = \"not-set\") }, 500);\n        setTimeout(() => { setModalState(modalState = \"\") }, 3000);\n        setTimeout(() => { setModalState(modalState = \"hide\") }, 3500);\n      } else {\n        setModalState(modalState = \"\");\n        setModalCopyState(modalCopyState = \"Error action at this time cannot be completed.\");\n        setTimeout(() => { setModalState(modalState = \"not-set\") }, 500);\n        setTimeout(() => { setModalState(modalState = \"\") }, 3000);\n        setTimeout(() => { setModalState(modalState = \"hide\") }, 3500);\n      }\n    }\n  }\n\n  return (\n    <section id=\"searchedBooks\">\n      {fetching === false ?\n        ''\n        : (\n          <React.Fragment>\n            {bookData[0].items.map((book) => (\n              <div className=\"book\" key={book.id}>\n                <h3>{book.volumeInfo.title}</h3>\n                <h4>Written By: {\n                  (book.volumeInfo.authors) ?\n                    book.volumeInfo.authors.map((author) => ` ${author}`).toString() :\n                    \" Not Provided\"\n                }</h4>\n                <div className=\"book-info\">\n                  <div className=\"book-buttons\">\n                    <button onClick={(e) => {\n                      e.preventDefault();\n                      window.open(book.volumeInfo.infoLink);\n                    }}>View\n                  </button>\n                    <button data-id={book.id} onClick={(e) => API.saveBooks(e.target.getAttribute(\"data-id\"))}>Save</button>\n                  </div>\n                  <div>{(book.volumeInfo.imageLinks ?\n                    <img src={book.volumeInfo.imageLinks.thumbnail} alt=\"book.volumeInfo.title\" />\n                    : <img src=\"./content/img/not-found.jpg\" alt=\"Not Found\" width=\"150\" />)}</div>\n                  <div>{(book.volumeInfo.description ? <p>{book.volumeInfo.description}</p> : <p>No description has been provided for this book.</p>)}</div>\n\n                </div>\n              </div>\n            ))}\n          </React.Fragment>\n        )}\n    </section>\n  )\n};\n\nexport default BookTable","import React from 'react';\nimport BookSearch from './BookSearch';\nimport BookTable from './BookTable';\n\nfunction Home() {\n  return (\n    <React.Fragment>\n      <BookSearch />\n      <BookTable />\n    </React.Fragment>\n  )\n}\n\nexport default Home;","import React, { useEffect, useContext } from 'react';\nimport { AppContext } from '../utils/AppContext';\n\n\nfunction SavedBooks() {\n\n    // Call Context \n    const { savedBookData, modal, modalCopy } = useContext(AppContext);\n    // Handle mobile class for operating menu\n    let [savedBooks, setSavedBooks] = savedBookData;\n    // eslint-disable-next-line\n    let [modalState, setModalState] = modal;\n    // eslint-disable-next-line\n    let [modalCopyState, setModalCopyState] = modalCopy;\n\n    const API = {\n        async savedBooks() {\n            const res = await fetch(`/api/savedBooks`);\n            const json = await res.json();\n            setSavedBooks(savedBooks = json);\n        },\n        async removeBook(id) {\n\n            // Convert to json syntax\n            let jsonId = { id: id }\n\n            const res = await fetch(\"/api/removeBook\", {\n                method: \"DELETE\",\n                body: JSON.stringify(jsonId),\n                headers: { \"Content-Type\": \"application/json\" }\n            });\n\n            const json = await res;\n\n            if (json.status === 200) {\n                setModalState(modalState = \"\");\n                setModalCopyState(modalCopyState = \"Book removed from saved books.\");\n                setTimeout(() => { setModalState(modalState = \"set\") }, 500);\n                setTimeout(() => { setModalState(modalState = \"\") }, 3000);\n                setTimeout(() => { setModalState(modalState = \"hide\") }, 3500);\n                setSavedBooks(savedBooks = savedBooks.filter(data => data.bookId !== id));\n            } else {\n                setModalState(modalState = \"\");\n                setModalCopyState(modalCopyState = \"Error action at this time cannot be completed.\");\n                setTimeout(() => { setModalState(modalState = \"not-set\") }, 500);\n                setTimeout(() => { setModalState(modalState = \"\") }, 3000);\n                setTimeout(() => { setModalState(modalState = \"hide\") }, 3500);\n            }\n        }\n    }\n\n    /********************************************* Call lifecycle methods *********************************************/\n\n    useEffect(() => {\n        API.savedBooks();\n        // eslint-disable-next-line\n    }, []);\n\n\n    return (\n        <section id=\"savedBooks\">\n            <header><h1>Google Books Saved</h1></header>\n            {savedBooks === '' ?\n                ''\n                : (\n                    <React.Fragment>\n\n                        {savedBookData[0].map((book) => (\n                            <div className=\"book\" key={book.bookId}>\n                                <h3>{book.title}</h3>\n                                <h4>Written By: {\n                                    (book.authors) ?\n                                        book.authors.map((author) => ` ${author}`).toString() :\n                                        \" Not Provided\"\n                                }</h4>\n                                <div className=\"book-info\">\n                                    <div className=\"book-buttons\">\n                                        <button onClick={(e) => {\n                                            e.preventDefault();\n                                            window.open(book.linkUrl);\n                                        }}>View\n                  </button>\n                                        <button data-id={book.bookId} onClick={(e) => API.removeBook(e.target.getAttribute(\"data-id\"))}>Delete</button>\n                                    </div>\n                                    <div>{(book.imgUrl ?\n                                        <img src={book.imgUrl} alt=\"book.volumeInfo.title\" />\n                                        : <img src=\"./content/img/not-found.jpg\" alt=\"Not Found\" width=\"150\" />)}</div>\n                                    <div>{(book.description ? <p>{book.description}</p> : <p>No description has been provided for this book.</p>)}</div>\n\n                                </div>\n                            </div>\n                        ))}\n                    </React.Fragment>\n                )}\n        </section>\n    )\n};\n\nexport default SavedBooks;","import React, { useContext } from 'react';\nimport { AppContext } from '../utils/AppContext';\n\nfunction MessageModal() {\n\n    const { modal, modalCopy } = useContext(AppContext);\n    let [modalState/*, setModalState*/] = modal;\n    let [modalCopyState /*, setModalCopyState */] = modalCopy;\n\n    return (\n        <React.Fragment>\n            <section id=\"MessageModal\" className={modalState}>\n                <p id=\"ModalMessage\">{modalCopyState}</p>\n            </section>\n        </React.Fragment>\n    );\n}\n\nexport default MessageModal","import React from 'react';\n\nfunction Footer() {\n\n    // Sets year in footer copyright\n    let year = new Date().getFullYear();\n\n    return (\n        <React.Fragment>\n            <footer>\n                <p id=\"copyright\">Copyright © Steven Ferreira {year}</p>\n            </footer>\n        </React.Fragment>\n    );\n}\n\nexport default Footer","import React from 'react';\nimport \"./scss/App.scss\";\nimport { AppProvider } from './utils/AppContext';\nimport Nav from './components/Nav';\nimport Home from './components/Home';\nimport SavedBooks from './components/SavedBooks';\nimport MessageModal from './components/MessageModal';\nimport Footer from './components/Footer';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nfunction App() {\n  return (\n    <AppProvider>\n      <Router>\n        <div className=\"App\">\n          <Nav />\n          <section id=\"wrapper\">\n            <div id=\"wrapper-contents\">\n              <Switch>\n                <Route path=\"/\" exact activeClassName='is-active' component={Home}></Route>\n                <Route path=\"/saved\" activeClassName='is-active' component={SavedBooks}></Route>\n              </Switch>\n            </div>\n            <Footer />\n          </section>\n          <MessageModal />\n\n        </div>\n      </Router>\n    </AppProvider>\n  );\n}\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}